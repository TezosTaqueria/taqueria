name: main

on:
  pull_request:
    branches:
      - main
      - prerelease*

  push:
    tags:
      - v*
    branches:
      - main

  release:
    types: [published]

concurrency:
  group: ${{ github.ref_name || github.ref }}
  cancel-in-progress: true

env:
  DENO_VERSION: '1.34.1'

jobs:
  # When we use reusable we lose the ability to to filter out the workflow for changes to certain paths.
  # This job creates boolean outputs based on path filters. These outputs can then be used as job conditions
  workflow-setup:
    name: Initial workflow checks
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.head.repo.fork }}
    outputs:
      vscode-changes: ${{ steps.filter.outputs.vscode }}
      prerelease: ${{ steps.get-version.outputs.prerelease }}
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-node@v3
      with:
        node-version: lts/gallium
        cache: "npm"

    - name: check for VSCode changes
      uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          vscode:
            - 'taqueria-vscode-extension/**'

    - name: get tag version
      id: get-version
      uses: battila7/get-version-action@v2

  build-binaries:
    name: Build Taqueria binaries
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ${{ matrix.os }}
    if: ${{ github.event_name != 'release' && !github.event.pull_request.head.repo.fork }}
    needs:
      - workflow-setup
    strategy:
      fail-fast: false
      matrix:
       include:
         - os: ubuntu-latest
           os_short: ubuntu
           deno_target: "x86_64-unknown-linux-gnu"
           taqueria_bin: "taq"
         - os: macOS-latest
           os_short: macos
           deno_target: "x86_64-apple-darwin"
           taqueria_bin: "taq"

    outputs:
      public-url-ubuntu: ${{ steps.public-url.outputs.ubuntu }}
      public-url-macos: ${{ steps.public-url.outputs.macos }}

    env:
      DENO_TARGET: ${{ matrix.deno_target }}

    steps:
      - name: Setup repo
        uses: actions/checkout@v3

      
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: lts/gallium
          cache: "npm"

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: "${{ env.DENO_VERSION }}"

      # - name: Delete node-gyp cache
      #   id: delete-node-gyp-cache
      #   run: Remove-Item -Recurse -Force %LocalAppData%/node-gyp/Cache
      #   if: ${{ matrix.os_short == 'windows' }}

      ## This job will compile the binary for the target OS. The binary is then tested by initializing a project called "test_project"
      ## If the initialization command output is equal to "Project taq'ified!" we know that the binary works for the given os, else the command exits with status code 1.
      - name: Build the binary for ${{ matrix.os }}
        id: build-bin
        shell: bash
        run: |
          BUILD=`git rev-parse --short "$GITHUB_SHA"`
          TAQ_VERSION="${TAQ_VERSION/\//-}"

          npm ci
          npm run build-types
          npm run build -w taqueria-protocol
          ./bin/build.sh
          ./"${{ matrix.taqueria_bin }}" init -p ./test_project
          if [ ! -f ./test_project/.taq/config.json ]; then
            echo "Project not initialized"
            exit 1
          fi
          mv "${{ matrix.taqueria_bin }}" "taq.${{ matrix.deno_target }}"

      # - name: Authenticate with GCP
      #   id: gcp-auth
      #   uses: google-github-actions/auth@v0
      #   with:
      #     workload_identity_provider: "projects/${{ secrets.GCP_PROJECT }}/locations/global/workloadIdentityPools/github-actions-storage-pool/providers/github-actions-oidc-provider"
      #     service_account: "${{ secrets.GCP_SERVICE_ACCOUNT }}"

      # - name: Upload binary to GCP
      #   id: upload-file
      #   uses: 'google-github-actions/upload-cloud-storage@v0'
      #   with:
      #     path: "taq.${{ matrix.deno_target }}"
      #     destination: "taqueria-artifacts/${{ github.ref }}"

      # - name: Set public url
      #   id: public-url
      #   run: |
      #     echo "::set-output name=${{ matrix.os_short }}::https://storage.googleapis.com/taqueria-artifacts/${{ steps.upload-file.outputs.uploaded }}"

  gather-info-for-e2e-tests:
    runs-on: ubuntu-latest
    needs:
      - workflow-setup

    if: ${{ always() && !(contains(needs.*.result, 'failure')) && github.event_name != 'release' }}

    outputs:
      test-chunks: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
      test-chunk-ids: ${{ steps['set-test-chunk-ids'].outputs['test-chunk-ids'] }}
      test-chunks-formatted: ${{ steps['format-test-chunks'].outputs['test-chunks-formatted'] }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/gallium
          cache: "npm"

      # This step currently attempts to put all test files found in the e2e folder into 4 equal sized buckets. The output is a list of lists
      - id: set-test-chunks
        name: Set Chunks
        # Uncomment the line above to run a specific test
        #run: echo "::set-output name=test-chunks::[[\"tests/e2e/ligo-plugin-e2e-tests.spec.ts\"]]"
        # Uncomment the line below to run all tests
        run: echo "::set-output name=test-chunks::$(npx jest --listTests --json tests/e2e/ | jq -c '[_nwise(length / 2 | ceil)]')"

      # This step just creates a list of numbers representing the different buckets of tests
      - id: set-test-chunk-ids
        name: Set Chunk IDs
        run: echo "::set-output name=test-chunk-ids::$(echo $CHUNKS | jq -c 'to_entries | map(.key)')"
        env:
          CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}

      # This step will take in the buckets of tests and format the names to remove the absolute path part leaving only the name we care about
      - id: format-test-chunks
        name: Format Chunks
        run: echo "::set-output name=test-chunks-formatted::$(echo $CHUNKS | jq -c '[.[] | join(" ") | sub("(/home|/Users)/runner/work/taqueria/taqueria/tests/e2e/";"";"g")]')"
        env:
          CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}

  run-tests:
    name: OS ${{ matrix.os }} test chunk ${{ matrix.chunk-ids }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        #os: [ubuntu-latest, macos-latest]
        chunk-ids: ${{ fromJson(needs.gather-info-for-e2e-tests.outputs['test-chunk-ids']) }}
    env:
      UNLIMITED_PINATA_TOKEN: ${{ secrets.PINATA_JWT_TOKEN }}
      SCAFFOLDING_PAT: ${{ secrets.SCAFFOLDING_PAT }}

    needs:
      - gather-info-for-e2e-tests
    if: ${{ github.event_name != 'release' && !(startsWith(github.ref, 'refs/tags/v')) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/gallium
          cache: "npm"

      - uses: denoland/setup-deno@v1
        with:
          deno-version: "${{ env.DENO_VERSION }}"

      - name: Setup Docker (on macos)
        run: brew install docker colima && colima start --mount-type sshfs
        if: runner.os == 'macOS'

      - name: Add working dir to PATH
        run: echo "$(pwd)" >> $GITHUB_PATH

      - name: Build all
        run: ./bin/build-all.sh
        
      - name: Run unit tests
        run: npm run test:unit -w tests

      - name: Run integration tests
        run: npm run test:integration -w tests
      - name: Run e2e tests
        run: npm run test:e2e -w tests ${{ fromJSON(env.CHUNKS)[matrix.chunk-ids] }}
        env:
          CHUNKS: ${{ needs.gather-info-for-e2e-tests.outputs['test-chunks-formatted'] }}

  report-e2e-status:
    needs: run-tests
    if:  ${{ failure() && github.event_name != 'release' }}
    runs-on: ubuntu-latest
    steps:
      - uses: ravsamhq/notify-slack-action@v1
        with:
          notification_title: "Failure in the e2e Tests"
          status: ${{ needs.run-tests.result }} # required
          notify_when: 'failure'
          message_format: '{emoji} ${{ github.actor }}, *{workflow}* {status_message}, please investigate: <{run_url}|Failing Run>'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.E2E_MONITORING_SLACK }} # required

  publish-npm-packages:
    runs-on: ubuntu-latest
    needs:
      - workflow-setup
    permissions:
      packages: write
      contents: read
    env: 
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      VERDACCIO_TOKEN: ${{ secrets.ECADINFRA_NPM_AUTH_TOKEN }}
      SCOPE: '@taqueria'
      NPM_REGISTRY: https://registry.npmjs.org/
      PRIVATE_NPM_REGISTRY: https://npm.ecadinfra.com
    outputs:
      pr-version: ${{ steps.publish-package.outputs.pr-version }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: 
          scope: "${{ env.SCOPE }}"
          node-version: lts/gallium
          cache: "npm"

      - name: Add working dir to PATH
        run: echo "$(pwd)" >> $GITHUB_PATH

      - run: npm ci

      - name: Build all
        run: |
          npm run build-types
          npm run build:packages 

      - name: Publish for PR
        if:  ${{ github.event_name == 'pull_request' }}
        id: publish-package
        run: |
          export HUSKY=0
          echo ${VERDACCIO_TOKEN} >> ~/.npmrc
          SHORT_SHA=$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-8)
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          BRANCH_NAME=$(echo ${GITHUB_REF} | cut -d'/' -f 3)
          PR_VERSION="${PACKAGE_VERSION}-${BRANCH_NAME}.${SHORT_SHA}"
          echo "::set-output name=pr-version::$PR_VERSION"
          npx lerna version "${PR_VERSION}" --no-push --no-git-tag-version --yes
          npm publish --workspaces --no-private --registry $PRIVATE_NPM_REGISTRY --strict-ssl=false
 
      - name: Publish for Alpha prerelease
        if: ${{ startsWith(needs.workflow-setup.outputs.prerelease, 'alpha') }}
        run: |
          echo ${NODE_AUTH_TOKEN} >> ~/.npmrc
          npm publish --workspaces --tag 'preview' --access public --registry $NPM_REGISTRY

      - name: Publish for RC release
        if: ${{ startsWith(needs.workflow-setup.outputs.prerelease, 'rc') }}
        run: |
          echo ${NODE_AUTH_TOKEN} >> ~/.npmrc
          npm publish  --workspaces --tag 'next' --access public --registry $NPM_REGISTRY
      
      - name: Publish for official release
        if: ${{ !needs.workflow-setup.outputs.prerelease && !github.event.release.prerelease && github.event.action == 'published' }}
        run: |
          echo ${NODE_AUTH_TOKEN} >> ~/.npmrc
          npm publish --workspaces --tag 'latest' --access public --registry $NPM_REGISTRY
  
  # Workaround for exposing env context to reusable workflows
  # TODO: Refactor once https://github.com/orgs/community/discussions/26671 is resolved
  expose-env-vars:
    runs-on: ubuntu-latest
    outputs:
      deno_version: ${{ env.DENO_VERSION }}
    steps:
      - run: echo "Exposing env.DENO_VERSION for reusable workflow"
  vscode-extension-workflow:
    needs: 
      - workflow-setup
      - publish-npm-packages
      - expose-env-vars
    if: ${{ !github.event.pull_request.head.repo.fork }}
    uses: ./.github/workflows/vscode-extension.yml
    with:
      prerelease: ${{ needs.workflow-setup.outputs.prerelease }}
      deno-version: ${{ needs.vscode-extension.outputs.deno_version }}
    secrets:
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }} 
      VSCE_PAT: ${{ secrets.VSCE_PAT }} 

  pr-comment:
    runs-on: ubuntu-latest
    # Without the 'always()' expression, the other conditions are not evaluated if a job is skipped or fails.
    if: ${{ always() &&
            !(contains(needs.*.result, 'failure')) && 
            github.event_name == 'pull_request' &&
            !github.event.pull_request.head.repo.fork }}
    needs: 
      - build-binaries
      - publish-npm-packages
      - vscode-extension-workflow
    steps:
      - uses: actions/checkout@v3

      - name: Get packages with lerna
        run: npx lerna ls >> ./packages

      - name: create pr comment
        uses: actions/github-script@v5
        id: pr-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const git_short_sha = "${{ github.event.pull_request.head.sha }}".substring(0, 8)
            const git_tag = "${{ github.ref }}".split('tags/')[1];

            // Build the vscode-extension workflow comment
            const vsCodeWorkflowState = "${{ needs.vscode-extension-workflow.result }}"
            
            let vsCodeCommentBody = ''
            if (vsCodeWorkflowState.includes('success')) {
              vsCodeCommentBody = `<p><a href="${{ needs.vscode-extension-workflow.outputs.vsixGcsUrl }}">${{ needs.vscode-extension-workflow.outputs.artifactFilename }}</a></p>`;
            } else {
              vsCodeCommentBody = `Build ${{ needs.vscode-extension-workflow.result }}`;
            }

            const packages = fs.readFileSync('packages', 'utf-8');

            let packagesBody = ""

            packages.split(/\r?\n/).forEach(package =>  {
                packagesBody = packagesBody.concat(`npm i ${package}@${{ needs.publish-npm-packages.outputs.pr-version }} --registry https://npm.ecadinfra.com<br>`);
            });

            let body = `
              <table>
                <tr>
                  <th scope="row">Latest Commit</th>
                  <td>${git_short_sha}</td>
                </tr>
                <tr>
                  <th scope="row">Taq Binaries</th>
                  <td>
                      <p>
                          <a href="${{ needs.build-binaries.outputs.public-url-ubuntu }}">Linux</a><br>
                          <a href="${{ needs.build-binaries.outputs.public-url-macos }}">MacOS</a><br>
                      </p>
                  </td>
                </tr>
                <tr>
                  <th scope="row">npm Packages</th>
                  <td>
                      <p>${packagesBody}</p>
                  </td>
                </tr>
                <tr>
                  <th scope="row">VSCode Extension VSIX</th>
                  <td>${vsCodeCommentBody}</td>
                </tr>
              </table>
            `;


            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment => comment.user.id === 41898282)                                                                       

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              })
            }

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - workflow-setup
      - build-binaries
      - publish-npm-packages
      - vscode-extension-workflow
    if: ${{ startsWith(github.ref, 'refs/tags/v') &&
            !github.event.pull_request.head.repo.fork }}
    steps:
      - uses: actions/checkout@v3

      - name: Download binaries 
        id: download-binaries 
        run: |
          mkdir release && cd release
          wget ${{ needs.build-binaries.outputs.public-url-ubuntu }} -O taq-linux
          wget ${{ needs.build-binaries.outputs.public-url-macos }} -O taq-macos
          wget ${{ needs.vscode-extension-workflow.outputs.vsixGcsUrl }}

      - name: Pre-release
        if: ${{ needs.workflow-setup.outputs.prerelease }}
        id: pre-release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./release/*
          draft: false
          prerelease: true

      - name: Final release
        if: ${{ !needs.workflow-setup.outputs.prerelease }}
        id: final-release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./release/*
          draft: true
