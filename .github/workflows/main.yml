name: main

on:
  pull_request:
    branches:
      - main

  push:
    tags:
      - v*

  release:
    types: [published]

env:
  SCOPE: '@taqueria'

concurrency:
  group: ${{ github.ref_name || github.ref }}
  cancel-in-progress: true

jobs:
  # When we use reusable we lose the ability to to filter out the workflow for changes to certain paths.
  # This job creates boolean outputs based on path filters. These outputs can then be used as job conditions
  detect-changes:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.head.repo.fork }}
    outputs:
      vscode: ${{ steps.filter.outputs.vscode }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          vscode:
            - 'taqueria-vscode-extension/**'
  
  build-binaries:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ${{ matrix.os }}
    if: ${{ github.event_name != 'release' && !github.event.pull_request.head.repo.fork }}
    strategy:
      fail-fast: true
      matrix:
       include:
         - os: ubuntu-latest
           os_short: ubuntu
           deno_target: "x86_64-unknown-linux-gnu"
           cache_path: |
            ./deno
            ~/.cache/deno
           taqueria_bin: "taq"
         - os: windows-latest
           os_short: windows
           deno_target: "x86_64-pc-windows-msvc"
           cache_path: |
            ./deno
            ~/AppData/Local/deno
           taqueria_bin: "taq.exe"
         - os: macOS-latest
           os_short: macos
           deno_target: "x86_64-apple-darwin"
           cache_path: |
            ./deno
            ~/Library/Caches/deno
           taqueria_bin: "taq"

    outputs:
      public-url-ubuntu: ${{ steps.public-url.outputs.ubuntu }}
      public-url-windows: ${{ steps.public-url.outputs.windows }}
      public-url-macos: ${{ steps.public-url.outputs.macos }}

    env:
      DENO_TARGET: ${{ matrix.deno_target }}

    steps:
      - name: Setup repo
        uses: actions/checkout@v2

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: "1.23.4"

      - uses: actions/cache@v3
        with:
          path: ${{ matrix.cache_path }}
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno-lock.json') }}

      ## This job will compile the binary for the target OS. The binary is then tested by initializing a project called "test_project"
      ## If the initialization command output is equal to "Project taq'ified!" we know that the binary works for the given os, else the command exits with status code 1.
      - name: Build the binary for ${{ matrix.os }}
        id: build-bin
        shell: bash
        env:
          TAQ_VERSION: ${{ github.ref_name }}
          DENO_DIR: "./deno"
        run: |
          BUILD=`git rev-parse --short "$GITHUB_SHA"`
          TAQ_VERSION="${TAQ_VERSION/\//-}"
          deno compile --output taq --allow-run --allow-write --allow-read --allow-env --allow-net --import-map ./import_map.json --no-prompt --target $DENO_TARGET index.ts --quickstart "`cat quickstart.md`" --setBuild "$BUILD" --setVersion "$TAQ_VERSION" --lock ./deno-lock.json
          ./"${{ matrix.taqueria_bin }}" init -p ./test_project
          if [ ! -f ./test_project/.taq/config.json ]; then
            echo "Project not initialized"
            exit 1
          fi
          mv "${{ matrix.taqueria_bin }}" "taq.${{ matrix.deno_target }}"

      - name: Authenticate with GCP
        id: gcp-auth
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: "projects/${{ secrets.GCP_PROJECT }}/locations/global/workloadIdentityPools/github-actions-storage-pool/providers/github-actions-oidc-provider"
          service_account: "${{ secrets.GCP_SERVICE_ACCOUNT }}"

      - name: Upload binary to GCP
        id: upload-file
        uses: 'google-github-actions/upload-cloud-storage@v0'
        with:
          path: "taq.${{ matrix.deno_target }}"
          destination: "taqueria-artifacts/${{ github.ref }}/${{ github.sha }}"

      - name: Set public url
        id: public-url
        run: |
          echo "::set-output name=${{ matrix.os_short }}::https://storage.googleapis.com/taqueria-artifacts/${{ steps.upload-file.outputs.uploaded }}"

  # publish-protocol-to-npm:
  #   if: ${{ !github.event.pull_request.head.repo.fork }}
  #   uses: ./.github/workflows/npm-publish.yml
  #   with:
  #     dir: taqueria-protocol
  #   secrets:
  #     NPM_TOKEN: ${{ secrets.NPMJS_PAT }}

  # publish-sdk-to-npm:
  #   if: ${{ !github.event.pull_request.head.repo.fork }}
  #   needs: publish-protocol-to-npm
  #   uses: ./.github/workflows/npm-publish.yml
  #   with:
  #     dir: taqueria-sdk
  #   secrets:
  #     NPM_TOKEN: ${{ secrets.NPMJS_PAT }}

  publish-ligo-plugin-to-npm:
    if: ${{ !github.event.pull_request.head.repo.fork }}
    # needs: publish-sdk-to-npm
    uses: ./.github/workflows/npm-publish.yml
    with:
      dir: taqueria-plugin-ligo
    secrets:
      NPM_TOKEN: ${{ secrets.NPMJS_PAT }}
  
  publish-smartpy-plugin-to-npm:
    if: ${{ !github.event.pull_request.head.repo.fork }}
    # needs: publish-sdk-to-npm
    uses: ./.github/workflows/npm-publish.yml
    with:
      dir: taqueria-plugin-smartpy
    secrets:
      NPM_TOKEN: ${{ secrets.NPMJS_PAT }}

  publish-taquito-plugin-to-npm:
    if: ${{ !github.event.pull_request.head.repo.fork }}
    # needs: publish-sdk-to-npm
    uses: ./.github/workflows/npm-publish.yml
    with:
      dir: taqueria-plugin-taquito
    secrets:
      NPM_TOKEN: ${{ secrets.NPMJS_PAT }}

  publish-flextesa-plugin-to-npm:
    if: ${{ !github.event.pull_request.head.repo.fork }}
    # needs: publish-sdk-to-npm
    uses: ./.github/workflows/npm-publish.yml
    with:
      dir: taqueria-plugin-flextesa
    secrets:
      NPM_TOKEN: ${{ secrets.NPMJS_PAT }}

  publish-archetype-plugin-to-npm:
    if: ${{ !github.event.pull_request.head.repo.fork }}
    # needs: publish-sdk-to-npm
    uses: ./.github/workflows/npm-publish.yml
    with:
      dir: taqueria-plugin-archetype
    secrets:
      NPM_TOKEN: ${{ secrets.NPMJS_PAT }}

  publish-tezos-client-plugin-to-npm:
     if: ${{ !github.event.pull_request.head.repo.fork }}
    #  needs: publish-sdk-to-npm
     uses: ./.github/workflows/npm-publish.yml
     with:
       dir: taqueria-plugin-tezos-client
     secrets:
       NPM_TOKEN: ${{ secrets.NPMJS_PAT }}

  # publish-contract-types-plugin-to-npm:
  #   if: ${{ !github.event.pull_request.head.repo.fork }}
  #   # needs: publish-sdk-to-npm
  #   uses: ./.github/workflows/npm-publish.yml
  #   with:
  #     dir: taqueria-plugin-contract-types
  #   secrets:
  #     NPM_TOKEN: ${{ secrets.NPMJS_PAT }}

  publish-ipfs-pinata-plugin-to-npm:
    if: ${{ !github.event.pull_request.head.repo.fork }}
    # needs: publish-sdk-to-npm
    uses: ./.github/workflows/npm-publish.yml
    with:
      dir: taqueria-plugin-ipfs-pinata
    secrets:
      NPM_TOKEN: ${{ secrets.NPMJS_PAT }}

  publish-jest-plugin-to-npm:
    if: ${{ !github.event.pull_request.head.repo.fork }}
    # needs: publish-sdk-to-npm
    uses: ./.github/workflows/npm-publish.yml
    with:
      dir: taqueria-plugin-jest
    secrets:
      NPM_TOKEN: ${{ secrets.NPMJS_PAT }}

  publish-state-plugin-to-npm:
    if: ${{ !github.event.pull_request.head.repo.fork }}
    # needs: publish-sdk-to-npm
    uses: ./.github/workflows/npm-publish.yml
    with:
      dir: taqueria-state
    secrets:
      NPM_TOKEN: ${{ secrets.NPMJS_PAT }}

  gather-info-for-e2e-tests:
    runs-on: ubuntu-latest
    needs: 
      - build-binaries
    
    if: ${{ always() && !(contains(needs.*.result, 'failure')) && github.event_name != 'release' }}
    
    outputs:
      test-chunks: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
      test-chunk-ids: ${{ steps['set-test-chunk-ids'].outputs['test-chunk-ids'] }}
      test-chunks-formatted: ${{ steps['format-test-chunks'].outputs['test-chunks-formatted'] }}
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
      
      # This step currently attempts to put all test files found in the e2e folder into 4 equal sized buckets. The output is a list of lists 
      - id: set-test-chunks
        name: Set Chunks
        run: echo "::set-output name=test-chunks::$(npx jest --listTests --json tests/e2e/ | jq -c '[_nwise(length / 4 | ceil)]')"
      
      # This step just creates a list of numbers representing the different buckets of tests
      - id: set-test-chunk-ids
        name: Set Chunk IDs
        run: echo "::set-output name=test-chunk-ids::$(echo $CHUNKS | jq -c 'to_entries | map(.key)')"
        env:
          CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
      
      # This step will take in the buckets of tests and format the names to remove the absolute path part leaving only the name we care about
      - id: format-test-chunks
        name: Format Chunks
        run: echo "::set-output name=test-chunks-formatted::$(echo $CHUNKS | jq -c '[.[] | join(" ") | sub("(/home|/Users)/runner/work/taqueria/taqueria/tests/e2e/";"";"g")]')"
        env:
          CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}

  run-tests:
    name: OS ${{ matrix.os }} test chunk ${{ matrix.chunk-ids }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
        chunk-ids: ${{ fromJson(needs.gather-info-for-e2e-tests.outputs['test-chunk-ids']) }}
        include:
        - os: ubuntu-latest
          url: ${{ needs.build-binaries.outputs.public-url-ubuntu }}
          final-name: taq
          make-executable-cmd: chmod +x
          get-current-dir: echo "$(pwd)"
          cache_path: |
            ~/.deno
            ~/.cache/deno
        - os: macos-latest
          url: ${{ needs.build-binaries.outputs.public-url-macos }}
          final-name: taq
          make-executable-cmd: chmod +x
          get-current-dir: echo "$(pwd)"
          cache_path: |
            ~/.deno
            ~/Library/Caches/deno
    needs: 
      - build-binaries
      - gather-info-for-e2e-tests
    if: ${{ always() && !(contains(needs.*.result, 'failure')) && github.event_name != 'release' && !(startsWith(github.ref, 'refs/tags/v')) }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
          # Setting node version to 16.13.2 to enable integration tests to pass
      
      - uses: denoland/setup-deno@v1
        with:
          deno-version: "1.23.4"

      - uses: actions/cache@v3
        with:
          path: ${{ matrix.cache_path }}
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno-lock.json') }}

      - name: download the binary from the build-binaries job and make it executable
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: |
          curl --url ${{ matrix.url }} -o ${{ matrix.final-name }} -L
          ${{ matrix.make-executable-cmd }} ${{ matrix.final-name }}
          ${{ matrix.get-current-dir }} >> $GITHUB_PATH

      - name: build binary and make executable
        if: ${{ github.event.pull_request.head.repo.fork }}
        env:
          TAQ_VERSION: ${{ github.ref_name }}
          DENO_DIR: "./deno"
        run: |
          COMMIT=`git rev-parse --short "$GITHUB_SHA"`
          TAQ_VERSION="${TAQ_VERSION/\//-}"
          deno compile --output taq --target $DENO_TARGET --allow-run --allow-write --allow-read --allow-env --allow-net index.ts --quickstart "`cat quickstart.md`" --setBuild "$COMMIT" --setVersion "$TAQ_VERSION" --lock ./deno-lock.json
          [[ $(./taq init -p ./test_project) == "Project taq'ified!" ]] 
          chmod +x taq
          echo "$(pwd)" >> $GITHUB_PATH

      - name: install dependencies
        run: npm ci

      - name: setup-docker
        if: runner.os == 'macOS'
        run: |
          brew install docker
          brew install colima
          colima start

      - name: builds for testing
        run: |
          npm run build -w taqueria-sdk -w taqueria-plugin-flextesa -w taqueria-plugin-taquito -w taqueria-plugin-ligo -w taqueria-plugin-smartpy -w taqueria-flextesa-manager -w taqueria-plugin-contract-types -w taqueria-plugin-ipfs-pinata -w taqueria-plugin-archetype -w taqueria-plugin-tezos-client -w taqueria-state -w taqueria-plugin-jest
          npm run build-docker -w taqueria-flextesa-manager

      - name: Run unit tests
        run: npm run test:unit -w tests

      - name: Run integration tests
        run: npm run test:integration -w tests

      - name: Run e2e tests
        run: npm run test:e2e -w tests ${{ fromJSON(env.CHUNKS)[matrix.chunk-ids] }}
        env:
          CHUNKS: ${{ needs.gather-info-for-e2e-tests.outputs['test-chunks-formatted'] }}
  
  report-e2e-status:
    needs: run-tests
    if:  ${{ failure() && github.event_name != 'release' }}
    runs-on: ubuntu-latest
    steps:
      - uses: ravsamhq/notify-slack-action@v1
        with:
          notification_title: "Failure in the e2e Tests"
          status: ${{ needs.run-tests.result }} # required
          notify_when: 'failure'
          message_format: '{emoji} ${{ github.actor }}, *{workflow}* {status_message}, please investigate: <{run_url}|Failing Run>'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.E2E_MONITORING_SLACK }} # required

  vscode-extension-workflow:
    needs: 
      - detect-changes
      - publish-state-plugin-to-npm

    if: ${{ (needs.detect-changes.outputs.vscode == 'true' || 
            github.event_name == 'release' || 
            startsWith(github.ref, 'refs/tags/v')) &&
            !github.event.pull_request.head.repo.fork }}
    uses: ./.github/workflows/vscode-extension.yml
    secrets:
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }} 
      VSCE_PAT: ${{ secrets.VSCE_PAT }} 

  pr-comment:
    runs-on: ubuntu-latest
    # Without the 'always()' expression, the other conditions are not evaluated if a job is skipped or fails.
    if: ${{ always() &&
            !(contains(needs.*.result, 'failure')) && 
            github.event_name == 'pull_request' &&
            !github.event.pull_request.head.repo.fork }}
    needs: 
      - build-binaries
      - publish-ligo-plugin-to-npm
      - publish-smartpy-plugin-to-npm
      - publish-taquito-plugin-to-npm
      - publish-flextesa-plugin-to-npm
      # - publish-contract-types-plugin-to-npm
      - publish-archetype-plugin-to-npm
      - publish-tezos-client-plugin-to-npm
      - publish-state-plugin-to-npm
      - publish-jest-plugin-to-npm
      - run-tests
      - vscode-extension-workflow
    steps:
      - uses: actions/checkout@v2

      - name: create pr comment
        uses: actions/github-script@v5
        id: pr-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const git_short_sha = "${{ github.sha }}".substring(0, 8)
            const git_tag = "${{ github.ref }}".split('tags/')[1];

            // Build the vscode-extension workflow comment
            const vsCodeWorkflowState = "${{ needs.vscode-extension-workflow.result }}"
            
            let vsCodeCommentBody = ''
            if (vsCodeWorkflowState.includes('success')) {
              vsCodeCommentBody = `<p><a href="${{ needs.vscode-extension-workflow.outputs.vsixGcsUrl }}">${{ needs.vscode-extension-workflow.outputs.artifactFilename }}</a></p>`;
            } else {
              vsCodeCommentBody = `Build ${{ needs.vscode-extension-workflow.result }}`;
            }

            function readInfo(filePath) {
              try {
                const data = fs.readFileSync(filePath)
                const JSONdata = JSON.parse(data.toString())
                const name = JSONdata.name.split("/")[1]
                const version = JSONdata.version
                return { name, version }
              } catch (error) {
                console.error(`Got an error trying to read the file: ${error.message}`)
              }
            }

            const ligo = readInfo("./taqueria-plugin-ligo/package.json")
            const smartpy = readInfo("./taqueria-plugin-smartpy/package.json")
            const taquito = readInfo("./taqueria-plugin-taquito/package.json")
            const sdk = readInfo("./taqueria-sdk/package.json")
            const flextesa = readInfo("./taqueria-plugin-flextesa/package.json")
            const contractTypes = readInfo("./taqueria-plugin-contract-types/package.json")
            const ipfsPinata = readInfo("./taqueria-plugin-ipfs-pinata/package.json")
            const archetype = readInfo("./taqueria-plugin-archetype/package.json")
            const tezosClient = readInfo("./taqueria-plugin-tezos-client/package.json")
            const stateJS = readInfo("./taqueria-state/package.json")

            let body = `
              <table>
                <tr>
                  <th scope="row">Latest Commit</th>
                  <td>${git_short_sha}</td>
                </tr>
                <tr>
                  <th scope="row">Taq Binaries</th>
                  <td>
                      <p>
                          <a href="${{ needs.build-binaries.outputs.public-url-ubuntu }}">Linux</a><br>
                          <a href="${{ needs.build-binaries.outputs.public-url-macos }}">MacOS</a><br>
                          <a href="${{ needs.build-binaries.outputs.public-url-windows }}">Windows</a>
                      </p>
                  </td>
                </tr>
                <tr>
                  <th scope="row">npm Packages</th>
                  <td>
                      <p>
                          npm install ${{ env.SCOPE }}/${sdk.name}@0.0.0-pr-${{ github.event.number }}-${git_short_sha}<br>
                          taq install ${{ env.SCOPE }}/${ligo.name}@0.0.0-pr-${{ github.event.number }}-${git_short_sha}<br>
                          taq install ${{ env.SCOPE }}/${smartpy.name}@0.0.0-pr-${{ github.event.number }}-${git_short_sha}<br>
                          taq install ${{ env.SCOPE }}/${taquito.name}@0.0.0-pr-${{ github.event.number }}-${git_short_sha}<br>
                          taq install ${{ env.SCOPE }}/${flextesa.name}@0.0.0-pr-${{ github.event.number }}-${git_short_sha}<br>
                          taq install ${{ env.SCOPE }}/${contractTypes.name}@0.0.0-pr-${{ github.event.number }}-${git_short_sha}<br/>
                          taq install ${{ env.SCOPE }}/${ipfsPinata.name}@0.0.0-pr-${{ github.event.number }}-${git_short_sha}<br/>
                          taq install ${{ env.SCOPE }}/${archetype.name}@0.0.0-pr-${{ github.event.number }}-${git_short_sha}
                          taq install ${{ env.SCOPE }}/${tezosClient.name}@0.0.0-pr-${{ github.event.number }}-${git_short_sha}
                          taq install ${{ env.SCOPE }}/${stateJS.name}@0.0.0-pr-${{ github.event.number }}-${git_short_sha}
                      </p>
                  </td>
                </tr>
                <tr>
                  <th scope="row">VSCode Extension VSIX</th>
                  <td>${vsCodeCommentBody}</td>
                </tr>
              </table>
            `;


            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment => comment.user.id === 41898282)                                                                       

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              })
            }

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - build-binaries
      - publish-ligo-plugin-to-npm
      - publish-smartpy-plugin-to-npm
      - publish-taquito-plugin-to-npm
      - publish-flextesa-plugin-to-npm
      # - publish-contract-types-plugin-to-npm
      - publish-archetype-plugin-to-npm
      - publish-tezos-client-plugin-to-npm
      - publish-state-plugin-to-npm
      - publish-jest-plugin-to-npm
      - vscode-extension-workflow
    if: ${{ startsWith(github.ref, 'refs/tags/v') &&
            !github.event.pull_request.head.repo.fork }}
    steps:
      - uses: actions/checkout@v2

      - name: Download binaries 
        id: download-binaries 
        run: |
          mkdir release && cd release
          wget ${{ needs.build-binaries.outputs.public-url-ubuntu }} -O taq-linux
          wget ${{ needs.build-binaries.outputs.public-url-windows }} -O taq-windows.exe
          wget ${{ needs.build-binaries.outputs.public-url-macos }} -O taq-macos
          wget ${{ needs.vscode-extension-workflow.outputs.vsixGcsUrl }}

      - name: Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./release/*
          draft: true
