{"mappings":";;AAAA;ACAA;ACAA;AAGA,MAAM,2BAAK,GAAG,OAAO,UAAwC,GAAoB;IAChF,MAAM,GAAG,GAAG,CAAA,GAAA,kDAA2B,CAAA,CAAC,UAAU,CAAC,AAAC;IACpD,IAAI,CAAC,GAAG,EAAE,OAAO,CAAA,GAAA,mCAAY,CAAA,CAAC,CAAC,+BAA+B,EAAE,UAAU,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;IACtG,IAAI;QAEG,MAAM,iBAAiB,GAAG,oCAAoC;QAC9D,MAAM,SAAS,GAAG,eAAe;QACjC,MAAM,OAAO,GAAI,MAAM,CAAA,GAAA,8BAAO,CAAA,CAAC,CAAC,+DAA+D,EAAE,iBAAiB,CAAC,sBAAsB,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC,AAAC;QAC1J,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC;QACzC,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC;IAEzC,qEAAqE;IACrE,sEAAsE;IACtE,6CAA6C;IAC7C,gEAAgE;IAChE,wCAAwC;IACxC,sDAAsD;IACtD,uEAAuE;IACvE,qDAAqD;IACrD,eAAe;IACf,+BAA+B;IAC/B,4BAA4B;IAC5B,QAAQ;IACR,KAAK;IACL,iCAAiC;IACjC,+BAA+B;KAErC,CAAC,OAAM;QACP,OAAO,CAAA,GAAA,mCAAY,CAAA,CAAC,yBAAyB,CAAC,CAAC;KAC/C;CACD,AAAC;IAEF,wCAAoB,GAAL,2BAAK;;;AD/Bb,MAAM,yCAAI,GAAG,CAAC,UAAwC,GAAoB;IAChF,OAAQ,UAAU,CAAC,IAAI;QACtB,KAAK,OAAO;YACX,OAAO,CAAA,GAAA,wCAAK,CAAA,CAAC,UAAU,CAAC,CAAC;QAC1B;YACC,OAAO,CAAA,GAAA,mCAAY,CAAA,CAAC,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC,CAAC;KACxF;CACD,AAAC;IAEF,wCAAoB,GAAL,yCAAI;;;ADVnB,CAAA,GAAA,6BAAM,CAAA,CAAC,MAAM,CAAC,CAAA,KAAK,GAAK,CAAA;QACvB,KAAK,EAAE,MAAM;QACb,MAAM,EAAE,KAAK;QACb,OAAO,EAAE,KAAK;QACd,KAAK,EAAE;YACN,CAAA,GAAA,2BAAI,CAAA,CAAC,MAAM,CAAC;gBACX,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,OAAO;gBAChB,WAAW,EAAE,8CAA8C;gBAC3D,OAAO,EAAE,OAAO;gBAChB,QAAQ,EAAE,kBAAkB;aAC5B,CAAC;SACF;QACD,KAAK,EAAE,CAAA,GAAA,wCAAI,CAAA;KACX,CAAA,AAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC","sources":["taqueria-plugin-core/index.ts","taqueria-plugin-core/core.ts","taqueria-plugin-core/clean.ts"],"sourcesContent":["import { Plugin, Task } from '@taqueria/node-sdk';\nimport core from './core';\n\nPlugin.create(_i18n => ({\n\talias: 'core',\n\tschema: '1.0',\n\tversion: '0.1',\n\ttasks: [\n\t\tTask.create({\n\t\t\ttask: 'clean',\n\t\t\tcommand: 'clean',\n\t\t\tdescription: 'Clean all the Taqueria-related docker images',\n\t\t\thandler: 'proxy',\n\t\t\tencoding: 'application/json',\n\t\t}),\n\t],\n\tproxy: core,\n}), process.argv);\n","import { sendAsyncErr } from '@taqueria/node-sdk';\nimport { RequestArgs } from '@taqueria/node-sdk/types';\nimport clean from './clean';\n\nexport const core = (parsedArgs: RequestArgs.ProxyRequestArgs): Promise<void> => {\n\tswitch (parsedArgs.task) {\n\t\tcase 'clean':\n\t\t\treturn clean(parsedArgs);\n\t\tdefault:\n\t\t\treturn sendAsyncErr(`${parsedArgs.task} is not an understood task by the Core plugin`);\n\t}\n};\n\nexport default core;\n","import { execCmd, getCurrentEnvironmentConfig, sendAsyncErr } from '@taqueria/node-sdk';\nimport { RequestArgs } from '@taqueria/node-sdk/types';\n\nconst clean = async (parsedArgs: RequestArgs.ProxyRequestArgs): Promise<void> => {\n\tconst env = getCurrentEnvironmentConfig(parsedArgs);\n\tif (!env) return sendAsyncErr(`There is no environment called ${parsedArgs.env} in your config.json`);\n\ttry {\n\n        const ecadFlextesaImage = 'ghcr.io/ecadlabs/taqueria-flextesa'\n        const ligoImage = 'ligolang/ligo'\n        const results = (await execCmd(`docker rmi --force $(docker images --quiet --filter \"reference=${ecadFlextesaImage}\" --filter \"reference=${ligoImage}\")`))\n        console.error(\"JCC out:\", results.stdout)\n        console.error(\"JCC err:\", results.stderr)\n\n        // // Don't need the ones below actually. Just use the docker command\n        // const imageListOutput = (await execCmd(`docker image list`)).stdout\n        // const images = imageListOutput.split('\\n')\n        // const imagesSegmented = images.map(image => image.split(' '))\n        // const imagesCleaned = imagesSegmented\n        //     .map(image => image.filter(word => word != ''))\n        //     .filter(image => image.length !== 0 && image[0] != 'REPOSITORY')\n        // const imagesRefined = imagesCleaned.map(image => {\n        //     return {\n        //         imageName: image[0],\n        //         imageId: image[1]\n        //     }\n        // })\n        // console.error(imageListOutput)\n        // console.error(imagesRefined)\n\n\t} catch {\n\t\treturn sendAsyncErr('No operations performed');\n\t}\n};\n\nexport default clean"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}