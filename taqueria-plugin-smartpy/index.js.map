{"mappings":"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","sources":["index.ts","compile.ts"],"sourcesContent":["import {Plugin, Task, Option} from 'taqueria-sdk'\nimport compile from './compile'\n\nPlugin.create(i18n => ({\n    schema: \"1.0\",\n    version: \"0.1\",\n    tasks: [\n        Task.create({\n            task: \"compile\",\n            command: \"compile [sourceFile]\",\n            aliases: [\"c\", \"compile-smartpy\"],\n            description: \"Compile a smart contract written in a SmartPy syntax to Michelson code\",\n            options: [],\n            handler: \"proxy\"\n        }),\n        Task.create({\n            task: \"teapot\",\n            command: \"teapot\",\n            aliases: [\"t\", \"tea\"],\n            description: \"Have a cup of tea\",\n            options: [\n                Option.create({\n                    shortFlag: \"g\",\n                    flag: \"green\",\n                    description: \"Make green tea instead\"\n                })\n            ],\n            handler: `echo \"I'm a little teapot<%= it.green ? \"full of green tea!\" : \"!\" %>\"`\n        })\n    ],\n    checkRuntimeDependencies: () => Promise.resolve({\n        status: \"success\",\n        report: [\n            {name: \"SmartPy\", path: \"SmartPy.sh\", version: \">=0.8.4\", kind: \"required\", met: true}\n        ]\n    }),\n    installRunTimeDependencies: () => Promise.resolve({\n        status: \"success\",\n        output: \"Ligo was found in /usr/bin/ligo\" // TODO this should use i18n\n    }),\n    proxy: compile\n}), process.argv)","import { SanitizedArgs, ActionResponse, Failure, LikeAPromise, ProxyAction } from \"taqueria-sdk/types\";\nimport {exec} from 'child_process'\nimport glob from 'fast-glob'\nimport {join} from 'path'\n\ntype Opts = SanitizedArgs & Record<string, unknown>\n\nconst execCmd = (cmd:string): Promise<ProxyAction> => new Promise((resolve, _) => {\n    exec(`sh -c \"${cmd}\"`, (err, stdout, stderr) => {\n        if (err) resolve({\n            status: 'failed',\n            stdout: stdout,\n            stderr: err.message\n        })\n        else if (stderr) resolve({\n            status: 'failed',\n            stdout,\n            stderr\n        })\n        else resolve({\n            status: 'success',\n            stdout,\n            stderr\n        })\n    })\n})\n\nconst getCompileCommand = (opts: Opts) => (sourceFile: string) => `~/smartpy-cli/SmartPy.sh compile ${join(opts.contractsDir, sourceFile)} ${opts.artifactsDir}`\n\nconst compileContract = (opts: Opts) => (sourceFile: string) =>\n    execCmd(getCompileCommand (opts) (sourceFile))\n\nconst compileAll = (opts: Opts) => {\n    // TODO: Fetch list of files from SDK\n    return glob(\n        ['**/*.py'],\n        {cwd: opts.contractsDir, absolute: false}\n    )\n    .then(entries => entries.map(compileContract(opts)))\n    .then(promises => Promise.all(promises))\n    .then(results => {\n        const response : ProxyAction = ({\n            status: 'success',\n            stdout: results ? \"Done.\\n\" : \"No SmartPy contracts found.\\n\",\n            stderr: \"\"\n        })\n        return response\n    })\n}\n\n\nexport const compile = <T>(parsedArgs: Opts): LikeAPromise<ActionResponse, Failure<T>> =>\n    parsedArgs.sourceFile\n        ? compileContract (parsedArgs) (parsedArgs.sourceFile as string)\n        : compileAll (parsedArgs)\n\nexport default compile"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"/"}