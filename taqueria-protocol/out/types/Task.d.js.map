{"version":3,"sources":["Task.ts"],"sourcesContent":["// Generated file: Do not edit \n// generated from @taqueria-protocol-types\n    \nimport { TaqError, toFutureParseErr, toFutureParseUnknownErr, toParseErr, toParseUnknownErr } from '@taqueria/protocol/TaqError';\nimport { FutureInstance, resolve, reject } from 'fluture';\nimport { ZodError } from 'zod';\nimport { Task } from '@taqueria/protocol/types';\nimport { Task as TaskStrict } from '@taqueria/protocol/out/types-strict';\nimport { taskSchema } from '@taqueria/protocol/out/types-zod';\n\nexport type { TaskStrict as Task };\n\nexport const from = (input: unknown): TaskStrict => {\n\ttry {\n\t\treturn taskSchema.parse(input) as TaskStrict;\n\t}\n\tcatch (previous: unknown) {\n\t\tif (previous instanceof ZodError) {\n\t\t\tconst msgs: string[] = previous.errors.reduce(\n\t\t\t\t(retval, issue) => {\n\t\t\t\t\tconst path = issue.path.join(' â†’ ');\n\t\t\t\t\tconst msg = path + ': ' + issue.message;\n\t\t\t\t\treturn [...retval, msg];\n\t\t\t\t},\n\t\t\t\t[\"Task is invalid:\"],\n\t\t\t);\n\t\t\tconst validationErr = msgs.join('\\n') + '\\n';\n\t\t\tthrow toParseErr(previous, validationErr);\n\t\t}\n\t\tthrow toParseUnknownErr(previous, \"There was a problem trying to parse a Task.\")\n\t}\n    \n};\n\nexport const create = (input: Task): TaskStrict => from(input);\n\nexport const of = (input: unknown): FutureInstance<TaqError, TaskStrict> => {\n\ttry {\n\t\treturn resolve(from(input))\n\t}\n\tcatch (err){\n\t\treturn reject(err) as FutureInstance<TaqError, never>\n\t}\n};\n\nexport const make = (input: Omit<TaskStrict, '__type'>): FutureInstance<TaqError, TaskStrict> => of(input);\n\n// TEMP: for interoperation with old protocol types during transition\nexport const schemas = {\n\trawSchema: taskSchema,\n\tschema: taskSchema.transform(val => val as TaskStrict),\n};\nexport const rawSchema = schemas.rawSchema;\nexport const internalSchema = taskSchema;\n\nexport type t = TaskStrict;\n        "],"mappings":";;;;;;;;;;;;;;;;AAGA;;","names":[]}