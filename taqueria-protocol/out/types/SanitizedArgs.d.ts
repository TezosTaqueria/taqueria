import { TaqError } from '@taqueria/protocol/TaqError';
import { FutureInstance } from 'fluture';
import { SanitizedArgs } from '@taqueria/protocol/types';
import { SanitizedArgs as SanitizedArgsStrict } from '@taqueria/protocol/out/types-strict';
export type { SanitizedArgsStrict as SanitizedArgs };
export declare const from: (input: unknown) => SanitizedArgsStrict;
export declare const create: (input: SanitizedArgs) => SanitizedArgsStrict;
export declare const of: (input: unknown) => FutureInstance<TaqError, SanitizedArgsStrict>;
export declare const make: (input: Omit<SanitizedArgsStrict, '__type'>) => FutureInstance<TaqError, SanitizedArgsStrict>;
export declare const schemas: {
    rawSchema: import("zod").ZodObject<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        quickstart: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
    }, "passthrough", import("zod").ZodTypeAny, {
        plugin?: string | undefined;
        quickstart: string;
        _: string[];
        projectDir: string;
        maxConcurrency: number;
        debug: boolean;
        disableState: boolean;
        logPluginRequests: boolean;
        fromVsCode: boolean;
        version: boolean;
        build: boolean;
        help: boolean;
        yes: boolean;
        env: string;
        setBuild: string | number;
        setVersion: string;
    }, {
        plugin?: string | undefined;
        quickstart: string;
        _: string[];
        projectDir: string;
        maxConcurrency: number;
        debug: boolean;
        disableState: boolean;
        logPluginRequests: boolean;
        fromVsCode: boolean;
        version: boolean;
        build: boolean;
        help: boolean;
        yes: boolean;
        env: string;
        setBuild: string | number;
        setVersion: string;
    }>;
    schema: import("zod").ZodEffects<import("zod").ZodObject<{
        _: import("zod").ZodArray<import("zod").ZodString, "many">;
        projectDir: import("zod").ZodString;
        maxConcurrency: import("zod").ZodNumber;
        debug: import("zod").ZodBoolean;
        disableState: import("zod").ZodBoolean;
        logPluginRequests: import("zod").ZodBoolean;
        fromVsCode: import("zod").ZodBoolean;
        version: import("zod").ZodBoolean;
        build: import("zod").ZodBoolean;
        help: import("zod").ZodBoolean;
        yes: import("zod").ZodBoolean;
        plugin: import("zod").ZodOptional<import("zod").ZodString>;
        env: import("zod").ZodString;
        quickstart: import("zod").ZodString;
        setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
        setVersion: import("zod").ZodString;
    }, "passthrough", import("zod").ZodTypeAny, {
        plugin?: string | undefined;
        quickstart: string;
        _: string[];
        projectDir: string;
        maxConcurrency: number;
        debug: boolean;
        disableState: boolean;
        logPluginRequests: boolean;
        fromVsCode: boolean;
        version: boolean;
        build: boolean;
        help: boolean;
        yes: boolean;
        env: string;
        setBuild: string | number;
        setVersion: string;
    }, {
        plugin?: string | undefined;
        quickstart: string;
        _: string[];
        projectDir: string;
        maxConcurrency: number;
        debug: boolean;
        disableState: boolean;
        logPluginRequests: boolean;
        fromVsCode: boolean;
        version: boolean;
        build: boolean;
        help: boolean;
        yes: boolean;
        env: string;
        setBuild: string | number;
        setVersion: string;
    }>, SanitizedArgsStrict, {
        plugin?: string | undefined;
        quickstart: string;
        _: string[];
        projectDir: string;
        maxConcurrency: number;
        debug: boolean;
        disableState: boolean;
        logPluginRequests: boolean;
        fromVsCode: boolean;
        version: boolean;
        build: boolean;
        help: boolean;
        yes: boolean;
        env: string;
        setBuild: string | number;
        setVersion: string;
    }>;
};
export declare const rawSchema: import("zod").ZodObject<{
    _: import("zod").ZodArray<import("zod").ZodString, "many">;
    projectDir: import("zod").ZodString;
    maxConcurrency: import("zod").ZodNumber;
    debug: import("zod").ZodBoolean;
    disableState: import("zod").ZodBoolean;
    logPluginRequests: import("zod").ZodBoolean;
    fromVsCode: import("zod").ZodBoolean;
    version: import("zod").ZodBoolean;
    build: import("zod").ZodBoolean;
    help: import("zod").ZodBoolean;
    yes: import("zod").ZodBoolean;
    plugin: import("zod").ZodOptional<import("zod").ZodString>;
    env: import("zod").ZodString;
    quickstart: import("zod").ZodString;
    setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
    setVersion: import("zod").ZodString;
}, "passthrough", import("zod").ZodTypeAny, {
    plugin?: string | undefined;
    quickstart: string;
    _: string[];
    projectDir: string;
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    version: boolean;
    build: boolean;
    help: boolean;
    yes: boolean;
    env: string;
    setBuild: string | number;
    setVersion: string;
}, {
    plugin?: string | undefined;
    quickstart: string;
    _: string[];
    projectDir: string;
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    version: boolean;
    build: boolean;
    help: boolean;
    yes: boolean;
    env: string;
    setBuild: string | number;
    setVersion: string;
}>;
export declare const internalSchema: import("zod").ZodObject<{
    _: import("zod").ZodArray<import("zod").ZodString, "many">;
    projectDir: import("zod").ZodString;
    maxConcurrency: import("zod").ZodNumber;
    debug: import("zod").ZodBoolean;
    disableState: import("zod").ZodBoolean;
    logPluginRequests: import("zod").ZodBoolean;
    fromVsCode: import("zod").ZodBoolean;
    version: import("zod").ZodBoolean;
    build: import("zod").ZodBoolean;
    help: import("zod").ZodBoolean;
    yes: import("zod").ZodBoolean;
    plugin: import("zod").ZodOptional<import("zod").ZodString>;
    env: import("zod").ZodString;
    quickstart: import("zod").ZodString;
    setBuild: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber]>;
    setVersion: import("zod").ZodString;
}, "passthrough", import("zod").ZodTypeAny, {
    plugin?: string | undefined;
    quickstart: string;
    _: string[];
    projectDir: string;
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    version: boolean;
    build: boolean;
    help: boolean;
    yes: boolean;
    env: string;
    setBuild: string | number;
    setVersion: string;
}, {
    plugin?: string | undefined;
    quickstart: string;
    _: string[];
    projectDir: string;
    maxConcurrency: number;
    debug: boolean;
    disableState: boolean;
    logPluginRequests: boolean;
    fromVsCode: boolean;
    version: boolean;
    build: boolean;
    help: boolean;
    yes: boolean;
    env: string;
    setBuild: string | number;
    setVersion: string;
}>;
export type t = SanitizedArgsStrict;
//# sourceMappingURL=SanitizedArgs.d.ts.map