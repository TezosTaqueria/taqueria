{"version":3,"sources":["ParsedTemplate.ts"],"sourcesContent":["// Generated file: Do not edit \n// generated from @taqueria-protocol-types\n    \nimport { TaqError, toFutureParseErr, toFutureParseUnknownErr, toParseErr, toParseUnknownErr } from '@taqueria/protocol/TaqError';\nimport { FutureInstance, resolve, reject } from 'fluture';\nimport { ZodError } from 'zod';\nimport { ParsedTemplate } from '@taqueria/protocol/types';\nimport { ParsedTemplate as ParsedTemplateStrict } from '@taqueria/protocol/out/types-strict';\nimport { parsedTemplateSchema } from '@taqueria/protocol/out/types-zod';\n\nexport type { ParsedTemplateStrict as ParsedTemplate };\n\nexport const from = (input: unknown): ParsedTemplateStrict => {\n\ttry {\n\t\treturn parsedTemplateSchema.parse(input) as ParsedTemplateStrict;\n\t}\n\tcatch (previous: unknown) {\n\t\tif (previous instanceof ZodError) {\n\t\t\tconst msgs: string[] = previous.errors.reduce(\n\t\t\t\t(retval, issue) => {\n\t\t\t\t\tconst path = issue.path.join(' â†’ ');\n\t\t\t\t\tconst msg = path + ': ' + issue.message;\n\t\t\t\t\treturn [...retval, msg];\n\t\t\t\t},\n\t\t\t\t[\"ParsedTemplate is invalid:\"],\n\t\t\t);\n\t\t\tconst validationErr = msgs.join('\\n') + '\\n';\n\t\t\tthrow toParseErr(previous, validationErr);\n\t\t}\n\t\tthrow toParseUnknownErr(previous, \"There was a problem trying to parse a ParsedTemplate.\")\n\t}\n    \n};\n\nexport const create = (input: ParsedTemplate): ParsedTemplateStrict => from(input);\n\nexport const of = (input: unknown): FutureInstance<TaqError, ParsedTemplateStrict> => {\n\ttry {\n\t\treturn resolve(from(input))\n\t}\n\tcatch (err){\n\t\treturn reject(err) as FutureInstance<TaqError, never>\n\t}\n};\n\nexport const make = (input: Omit<ParsedTemplateStrict, '__type'>): FutureInstance<TaqError, ParsedTemplateStrict> => of(input);\n\n// TEMP: for interoperation with old protocol types during transition\nexport const schemas = {\n\trawSchema: parsedTemplateSchema,\n\tschema: parsedTemplateSchema.transform(val => val as ParsedTemplateStrict),\n};\nexport const rawSchema = schemas.rawSchema;\nexport const internalSchema = parsedTemplateSchema;\n\nexport type t = ParsedTemplateStrict;\n        "],"mappings":";;;;;;;;;;;;;;;;AAGA;;","names":[]}