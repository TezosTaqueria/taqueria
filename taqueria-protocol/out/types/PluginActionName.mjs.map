{"version":3,"sources":["PluginActionName.ts"],"sourcesContent":["// Generated file: Do not edit \n// generated from @taqueria-protocol-types\n    \nimport { TaqError, toFutureParseErr, toFutureParseUnknownErr, toParseErr, toParseUnknownErr } from '@taqueria/protocol/TaqError';\nimport { FutureInstance, resolve, reject } from 'fluture';\nimport { ZodError } from 'zod';\nimport { PluginActionName } from '@taqueria/protocol/types';\nimport { PluginActionName as PluginActionNameStrict } from '@taqueria/protocol/out/types-strict';\nimport { pluginActionNameSchema } from '@taqueria/protocol/out/types-zod';\n\nexport type { PluginActionNameStrict as PluginActionName };\n\nexport const from = (input: unknown): PluginActionNameStrict => {\n\ttry {\n\t\treturn pluginActionNameSchema.parse(input) as PluginActionNameStrict;\n\t}\n\tcatch (previous: unknown) {\n\t\tif (previous instanceof ZodError) {\n\t\t\tconst msgs: string[] = previous.errors.reduce(\n\t\t\t\t(retval, issue) => {\n\t\t\t\t\tconst path = issue.path.join(' â†’ ');\n\t\t\t\t\tconst msg = path + ': ' + issue.message;\n\t\t\t\t\treturn [...retval, msg];\n\t\t\t\t},\n\t\t\t\t[\"PluginActionName is invalid:\"],\n\t\t\t);\n\t\t\tconst validationErr = msgs.join('\\n') + '\\n';\n\t\t\tthrow toParseErr(previous, validationErr);\n\t\t}\n\t\tthrow toParseUnknownErr(previous, \"There was a problem trying to parse a PluginActionName.\")\n\t}\n    \n};\n\nexport const create = (input: PluginActionName): PluginActionNameStrict => from(input);\n\nexport const of = (input: unknown): FutureInstance<TaqError, PluginActionNameStrict> => {\n\ttry {\n\t\treturn resolve(from(input))\n\t}\n\tcatch (err){\n\t\treturn reject(err) as FutureInstance<TaqError, never>\n\t}\n};\n\nexport const make = (input: Omit<PluginActionNameStrict, '__type'>): FutureInstance<TaqError, PluginActionNameStrict> => of(input);\n\n// TEMP: for interoperation with old protocol types during transition\nexport const schemas = {\n\trawSchema: pluginActionNameSchema,\n\tschema: pluginActionNameSchema.transform(val => val as PluginActionNameStrict),\n};\nexport const rawSchema = schemas.rawSchema;\nexport const internalSchema = pluginActionNameSchema;\n\nexport type t = PluginActionNameStrict;\n        "],"mappings":";AAGA,SAA8D,YAAY,yBAAyB;AACnG,SAAyB,SAAS,cAAc;AAChD,SAAS,gBAAgB;AAGzB,SAAS,8BAA8B;AAIhC,IAAM,OAAO,CAAC,UAA2C;AAC/D,MAAI;AACH,WAAO,uBAAuB,MAAM,KAAK;AAAA,EAC1C,SACO,UAAP;AACC,QAAI,oBAAoB,UAAU;AACjC,YAAM,OAAiB,SAAS,OAAO;AAAA,QACtC,CAAC,QAAQ,UAAU;AAClB,gBAAM,OAAO,MAAM,KAAK,KAAK,UAAK;AAClC,gBAAM,MAAM,OAAO,OAAO,MAAM;AAChC,iBAAO,CAAC,GAAG,QAAQ,GAAG;AAAA,QACvB;AAAA,QACA,CAAC,8BAA8B;AAAA,MAChC;AACA,YAAM,gBAAgB,KAAK,KAAK,IAAI,IAAI;AACxC,YAAM,WAAW,UAAU,aAAa;AAAA,IACzC;AACA,UAAM,kBAAkB,UAAU,yDAAyD;AAAA,EAC5F;AAED;AAEO,IAAM,SAAS,CAAC,UAAoD,KAAK,KAAK;AAE9E,IAAM,KAAK,CAAC,UAAqE;AACvF,MAAI;AACH,WAAO,QAAQ,KAAK,KAAK,CAAC;AAAA,EAC3B,SACO,KAAP;AACC,WAAO,OAAO,GAAG;AAAA,EAClB;AACD;AAEO,IAAM,OAAO,CAAC,UAAoG,GAAG,KAAK;AAG1H,IAAM,UAAU;AAAA,EACtB,WAAW;AAAA,EACX,QAAQ,uBAAuB,UAAU,SAAO,GAA6B;AAC9E;AACO,IAAM,YAAY,QAAQ;AAC1B,IAAM,iBAAiB;","names":[]}