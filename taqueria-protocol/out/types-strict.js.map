{"version":3,"sources":["types-strict.ts"],"sourcesContent":["// Generated file: Do not edit \n// generated from @taqueria-protocol-types\n    \n// ---- Simple Types & Type Fragments ----\n\n/** @minLength 1 */\nexport type NonEmptyString = { __type: NonEmptyString } & string;\n\n/** @pattern ^[A-Za-z]$ */\nexport type SingleChar = { __type: SingleChar } & SingleCharRaw;\ntype SingleCharRaw = NonEmptyString;\n\n/** @pattern ^[A-Za-z\\-\\ ]+ */\nexport type Verb = { __type: Verb } & VerbRaw;\ntype VerbRaw = NonEmptyString;\n\nexport type Alias = { __type: Alias } & AliasRaw;\ntype AliasRaw = (Verb | SingleChar);\n\n/** @pattern ^[A-Za-z]+[A-Za-z0-9-_ ]*$ */\nexport type HumanReadableIdentifier = { __type: HumanReadableIdentifier } & HumanReadableIdentifierRaw;\ntype HumanReadableIdentifierRaw = NonEmptyString;\n\nexport type SanitizedAbsPath = { __type: SanitizedAbsPath } & SanitizedAbsPathRaw;\ntype SanitizedAbsPathRaw = NonEmptyString;\n\nexport type SanitizedPath = { __type: SanitizedPath } & SanitizedPathRaw;\ntype SanitizedPathRaw = NonEmptyString;\n\nexport type Settings = { __type: Settings } & {\n\tconsent: 'opt_in' | 'opt_out';\n};\n\n/**\n * @minimum 1651846877\n * @integer\n */\nexport type Timestamp = { __type: Timestamp } & number;\n\n/**\n * @minLength 1\n * @pattern ^\\d([\\d_]+\\d)?$ */\nexport type Tz = { __type: Tz } & TzRaw;\ntype TzRaw = NonEmptyString;\n\n/**\n * @minLength 1\n * @pattern ^\\d+\\.\\d+(\\.\\d+)*$ */\nexport type VersionNumber = { __type: VersionNumber } & VersionNumberRaw;\ntype VersionNumberRaw = NonEmptyString;\n\n/** @format url */\nexport type Url = { __type: Url } & UrlRaw;\ntype UrlRaw = NonEmptyString;\n\n// ---- Plugin Definition Types ----\n\n/** interpreted using yargs @pattern ^([A-Za-z-_ ]+ ?)((\\[.+\\] ?)|(\\<.+\\>) ?)*$ */\nexport type Command = { __type: Command } & CommandRaw;\ntype CommandRaw = NonEmptyString;\n\nexport type Option = { __type: Option } & {\n\tshortFlag?: SingleChar;\n\tflag: Verb;\n\tdescription: NonEmptyString;\n\tdefaultValue?: string | number | boolean;\n\ttype?: 'string' | 'number' | 'boolean';\n\trequired?: boolean;\n\tboolean?: boolean;\n\tchoices?: NonEmptyString[];\n};\n\nexport type PositionalArg = { __type: PositionalArg } & {\n\tplaceholder: HumanReadableIdentifier;\n\tdescription: NonEmptyString;\n\tdefaultValue?: string | number | boolean;\n\ttype?: 'string' | 'number' | 'boolean';\n\trequired?: boolean;\n};\n\nexport type InstalledPlugin = { __type: InstalledPlugin } & {\n\ttype: 'npm' | 'binary' | 'deno';\n\tname: NonEmptyString;\n};\n\nexport type Operation = { __type: Operation } & {\n\toperation: Verb;\n\tcommand: Command;\n\tdescription?: NonEmptyString;\n\tpositionals?: PositionalArg[];\n\toptions?: Option[];\n\thandler?: (args: PersistentState) => (args: RequestArgs) => void;\n};\n\nexport type ParsedOperation = { __type: ParsedOperation } & ParsedOperationRaw;\ntype ParsedOperationRaw = Omit<Operation, 'handler'>;\n\nexport type Template = { __type: Template } & {\n\ttemplate: Verb;\n\tcommand: Command;\n\tdescription: NonEmptyString;\n\thidden?: boolean;\n\toptions?: Option[];\n\tpositionals?: PositionalArg[];\n\thandler: TemplateHandler;\n\tencoding?: PluginResponseEncoding;\n};\n\ntype TemplateHandler =\n\t| NonEmptyString // TODO: should this be Verb?\n\t| ((args: RequestArgs) =>\n\t\t| PluginJsonResponse\n\t\t| Promise<PluginJsonResponse>)\n\t| Promise<void>;\n\nexport type ParsedTemplate = { __type: ParsedTemplate } & ParsedTemplateRaw;\ntype ParsedTemplateRaw = Omit<Template, 'handler'> & {\n\thandler: string;\n};\n\ntype PluginSchemaBase = {\n\tname: NonEmptyString;\n\tversion: VersionNumber;\n\tschema: VersionNumber;\n\talias: Alias;\n\ttasks?: Task[];\n};\n\nexport type PluginInfo = { __type: PluginInfo } & PluginInfoRaw;\ntype PluginInfoRaw = PluginSchemaBase & {\n\toperations?: ParsedOperation[];\n\ttemplates?: ParsedTemplate[];\n};\n\nexport type PluginSchema = { __type: PluginSchema } & PluginSchemaRaw;\ntype PluginSchemaRaw = PluginSchemaBase & {\n\toperations?: Operation[];\n\ttemplates?: Template[];\n\tproxy?: (args: RequestArgs) => Promise<PluginProxyResponse>;\n\tcheckRuntimeDependencies?: (args: RequestArgs) => Promise<PluginDependenciesResponse>;\n\tinstallRuntimeDependencies?: (args: RequestArgs) => Promise<PluginDependenciesResponse>;\n};\n\nexport type Task = { __type: Task } & {\n\ttask: Verb;\n\tcommand: Command;\n\taliases?: Alias[];\n\t/** @minLength 3 */\n\tdescription?: NonEmptyString;\n\texample?: NonEmptyString;\n\thidden?: boolean;\n\tencoding?: PluginResponseEncoding;\n\thandler: 'proxy' | NonEmptyString;\n\toptions?: Option[];\n\tpositionals?: PositionalArg[];\n};\n\n// ---- Process Interop ----\n\nexport type RuntimeDependency = { __type: RuntimeDependency } & {\n\tname: HumanReadableIdentifier;\n\tpath: string;\n\tversion: string;\n\tkind: 'required' | 'optional';\n};\n\nexport type RuntimeDependencyReport = { __type: RuntimeDependencyReport } & RuntimeDependencyReportRaw;\ntype RuntimeDependencyReportRaw = RuntimeDependency & {\n\tmet: boolean;\n};\n\nexport type PluginDependenciesResponse = { __type: PluginDependenciesResponse } & {\n\treport: RuntimeDependencyReport[];\n};\n\nexport type PluginJsonResponse = { __type: PluginJsonResponse } & {\n\tdata?: unknown;\n\n\t/** @default none */\n\trender: 'none' | 'table' | 'string';\n} | void;\n\nexport type PluginProxyResponse = { __type: PluginProxyResponse } & PluginProxyResponseRaw;\ntype PluginProxyResponseRaw = void | PluginJsonResponse;\n\n/** @default none */\nexport type PluginResponseEncoding = { __type: PluginResponseEncoding } & PluginResponseEncodingRaw;\ntype PluginResponseEncodingRaw = 'none' | 'json' | 'application/json';\n\n/**\n * @min 100\n */\nexport type BuildNumber = { __type: BuildNumber } & number;\n\nexport type SanitizedArgs = { __type: SanitizedArgs } & {\n\t_: string[];\n\tprojectDir: SanitizedPath;\n\tmaxConcurrency: number;\n\tdebug: boolean;\n\tdisableState: boolean;\n\tlogPluginRequests: boolean;\n\tfromVsCode: boolean;\n\tversion: boolean;\n\tbuild: boolean;\n\thelp: boolean;\n\tyes: boolean;\n\tplugin?: NonEmptyString;\n\tenv: NonEmptyString;\n\tquickstart: NonEmptyString;\n\tsetBuild: NonEmptyString | BuildNumber;\n\tsetVersion: NonEmptyString;\n};\n\nexport type PluginActionName = { __type: PluginActionName } & PluginActionNameRaw;\ntype PluginActionNameRaw =\n\t| 'proxy'\n\t| 'pluginInfo'\n\t| 'checkRuntimeDependencies'\n\t| 'installRuntimeDependencies'\n\t| 'proxyTemplate';\n\nexport type RequestArgs = { __type: RequestArgs } & RequestArgsRaw;\ntype RequestArgsRaw = Omit<SanitizedArgs, 'quickstart'> & {\n\ttaqRun: PluginActionName;\n\t// TODO: JSON.parse if string\n\tconfig: LoadedConfig;\n};\n\nexport type ProxyTaskArgs = { __type: ProxyTaskArgs } & ProxyTaskArgsRaw;\ntype ProxyTaskArgsRaw = RequestArgs & {\n\ttask: NonEmptyString;\n};\n\nexport type ProxyTemplateArgs = { __type: ProxyTemplateArgs } & ProxyTemplateArgsRaw;\ntype ProxyTemplateArgsRaw = RequestArgs & {\n\ttemplate: NonEmptyString;\n};\n\n// ---- Hash Types ----\n\n/** @min 1 */\nexport type EconomicalProtocolHash = { __type: EconomicalProtocolHash } & string;\n\n/** @pattern ^tz\\d[A-Za-z0-9]{33}$ */\nexport type PublicKeyHash = { __type: PublicKeyHash } & string;\n\n/** @pattern ^[A-Fa-f0-9]{64}$ */\nexport type SHA256 = { __type: SHA256 } & string;\n\n// ---- Contract Objects ----\n\nexport type Contract = { __type: Contract } & {\n\tsourceFile: NonEmptyString;\n\thash: SHA256;\n};\n\nexport type Faucet = { __type: Faucet } & {\n\tpkh: PublicKeyHash;\n\tmnemonic: string[];\n\t/** @format email */\n\temail: string;\n\tpassword: string;\n\t/** @pattern ^\\d+$ */\n\tamount: string;\n\tactivation_code: string;\n};\n\n// ---- External ----\n\n/** Port number for postgresql container\n * @default 5432\n */\ntype TzKtConfigPostgresqlPort = number;\n\n/** Port number for TzKt API\n * @default 5000\n */\ntype TzKtConfigApiPort = number;\n\nexport type TzKtConfig = { __type: TzKtConfig } & {\n\t/** Do not start TzKt when sandbox starts */\n\tdisableAutostartWithSandbox?: boolean;\n\tpostgresqlPort?: TzKtConfigPostgresqlPort;\n\tapiPort?: TzKtConfigApiPort;\n};\n\n// ---- Project Files ----\n\nexport type Environment = { __type: Environment } & {\n\tnetworks: NonEmptyString[];\n\tsandboxes: NonEmptyString[];\n\tstorage?: Record<string, NonEmptyString>;\n\taliases?: Record<string, Record<string, NonEmptyString>>;\n};\n\nexport type EphemeralState = { __type: EphemeralState } & {\n\tbuild: string;\n\tconfigHash: string;\n\n\t// Note: these were changed from a union(either type) to intersection(both types): i.e. InstalledPlugin | Task is not correct\n\n\t/** Task/Plugin Mapping */\n\ttasks: Record<string, InstalledPlugin & Task>;\n\t/** Operation/Plugin Mapping */\n\toperations: Record<string, InstalledPlugin & ParsedOperation>;\n\t/** Templates/Plugin Mapping */\n\ttemplates: Record<string, InstalledPlugin & ParsedTemplate>;\n\n\tplugins: PluginInfo[];\n};\n\nexport type PersistentState = { __type: PersistentState } & {\n\toperations: Record<string, PersistedOperation>;\n\ttasks: Record<string, PersistedTask>;\n};\n\nexport type PersistedTask = { __type: PersistedTask } & {\n\ttask: Verb;\n\tplugin: NonEmptyString;\n\ttime: Timestamp;\n\toutput?: unknown;\n};\n\nexport type PersistedOperation = { __type: PersistedOperation } & {\n\thash: SHA256;\n\ttime: Timestamp;\n\toutput?: unknown;\n};\n\n/**\n * @minLength 1\n * @pattern ^[A-Za-z0-9]+[A-Za-z0-9-_]+\\.[A-Za-z0-9]+[A-Za-z0-9-_]+\\.[A-Za-z0-9]+[A-Za-z0-9-_]+$\n */\nexport type ProvisionerID = { __type: ProvisionerID } & string;\n\nexport type Provisioner = { __type: Provisioner } & {\n\tid: ProvisionerID;\n\tplugin: NonEmptyString;\n\toperation: NonEmptyString | 'custom';\n\tcommand?: string;\n\tlabel?: string;\n\tdepends_on?: ProvisionerID[];\n};\n\nexport type Provisions = { __type: Provisions } & ProvisionsRaw;\ntype ProvisionsRaw = Provisioner[];\n\n// ---- Project Files: Config ----\n\n/** @minLength 1 Default environment must reference the name of an existing environment.*/\ntype EnvironmentName = NonEmptyString;\n\n/** @default en */\ntype HumanLanguage = 'en' | 'fr';\n\n/**\n * @default contracts\n * @minLength 1\n */\nexport type ConfigContractsDir = { __type: ConfigContractsDir } & string;\n\n/**\n * @default artifacts\n * @minLength 1\n */\nexport type ConfigArtifactsDir = { __type: ConfigArtifactsDir } & string;\n\nexport type Config = { __type: Config } & {\n\tlanguage?: HumanLanguage;\n\tplugins?: InstalledPlugin[];\n\tcontractsDir?: ConfigContractsDir;\n\tartifactsDir?: ConfigArtifactsDir;\n\tnetwork?: Record<string, NetworkConfig>;\n\tsandbox?: Record<string, SandboxConfig>;\n\n\t// TODO: This causes a type conflict and is not supported\n\t// accounts?: {\n\t// \tdefault: EnvironmentName;\n\t// } & Record<string, Environment>;\n\tenvironment: Record<string, Environment | EnvironmentName>;\n\taccounts?: Record<string, Tz>;\n\tcontracts?: Record<string, Contract>;\n\tmetadata?: MetadataConfig;\n};\n\n// TODO: sandbox breaks ts-to-zod\nexport type LoadedConfig = { __type: LoadedConfig } & LoadedConfigRaw;\ntype LoadedConfigRaw = Config & {\n\tprojectDir: SanitizedAbsPath;\n\tconfigFile: SanitizedAbsPath;\n\thash: SHA256;\n};\n\nexport type MetadataConfig = { __type: MetadataConfig } & {\n\tname?: string;\n\tprojectDescription?: string;\n\tauthors?: string[];\n\tlicense?: string;\n\thomepage?: string;\n};\n\nexport type NetworkConfig = { __type: NetworkConfig } & {\n\tlabel: HumanReadableIdentifier;\n\trpcUrl: Url;\n\tprotocol: EconomicalProtocolHash;\n\taccounts?: Record<string, NetworkAccountConfig>;\n\tfaucet?: Faucet;\n};\n\nexport type NetworkAccountConfig = { __type: NetworkAccountConfig } & {\n\tpublicKey: NonEmptyString;\n\tpublicKeyHash: PublicKeyHash;\n\tprivateKey: NonEmptyString; /** TODO: Should this be secretKey: @see {SandboxAccountConfig} */\n};\n\nexport type SandboxAccountConfig = { __type: SandboxAccountConfig } & {\n\tencryptedKey: NonEmptyString;\n\tpublicKeyHash: PublicKeyHash;\n\tsecretKey: NonEmptyString;\n};\n\nexport type SandboxConfig = { __type: SandboxConfig } & {\n\tlabel: NonEmptyString;\n\trpcUrl: Url;\n\tprotocol: EconomicalProtocolHash;\n\tattributes?: string | number | boolean;\n\tplugin?: Verb;\n\n\t// TODO: This causes a type conflict and is not supported\n\t// accounts?: {\n\t// \tdefault: NonEmptyString;\n\t// } & Record<string, SandboxAccountConfig>;\n\taccounts?: Record<string, SandboxAccountConfig | NonEmptyString>;\n\n\ttzkt?: TzKtConfig;\n};\n\nexport type ScaffoldConfig = { __type: ScaffoldConfig } & {\n\tpostInit?: string;\n};\n\nexport type ParsedConfig = { __type: ParsedConfig } & ParsedConfigRaw;\ntype ParsedConfigRaw = Omit<Config, 'sandbox'> & {\n\tsandbox: Record<string, SandboxConfig | NonEmptyString>;\n};\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}