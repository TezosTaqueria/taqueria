// WARNING: This file is autogenerated and should NOT be modified
{
	"build": "7673210",
	"configHash": "9872c4c3f798814c31a9f2133df70c13fac8f21e5bc5ac63c728e2a86fa08da8",
	"tasks": {
		"ligo": {
			"type": "npm",
			"name": "@taqueria/plugin-ligo"
		},
		"compile": {
			"type": "npm",
			"name": "@taqueria/plugin-ligo"
		},
		"compile-all": {
			"type": "npm",
			"name": "@taqueria/plugin-ligo"
		},
		"test": {
			"task": "test",
			"command": "test",
			"description": "Provided by more than one plugin. The option --plugin is required.",
			"handler": "proxy",
			"options": [
				{
					"flag": "plugin",
					"description": "Specify which plugin should be used to execute this task",
					"required": true,
					"choices": [
						"@taqueria/plugin-ligo",
						"ligo",
						"@taqueria/plugin-jest",
						"jest"
					]
				}
			]
		},
		"get-image": {
			"type": "npm",
			"name": "@taqueria/plugin-ligo"
		},
		"start sandbox": {
			"type": "npm",
			"name": "@taqueria/plugin-flextesa"
		},
		"stop sandbox": {
			"type": "npm",
			"name": "@taqueria/plugin-flextesa"
		},
		"list accounts": {
			"type": "npm",
			"name": "@taqueria/plugin-flextesa"
		},
		"bake": {
			"type": "npm",
			"name": "@taqueria/plugin-flextesa"
		},
		"show protocols": {
			"type": "npm",
			"name": "@taqueria/plugin-flextesa"
		},
		"deploy": {
			"type": "npm",
			"name": "@taqueria/plugin-taquito"
		},
		"transfer": {
			"type": "npm",
			"name": "@taqueria/plugin-taquito"
		},
		"fund": {
			"type": "npm",
			"name": "@taqueria/plugin-taquito"
		},
		"instantiate-account": {
			"type": "npm",
			"name": "@taqueria/plugin-taquito"
		}
	},
	"operations": {},
	"templates": {
		"contract": {
			"type": "npm",
			"name": "@taqueria/plugin-ligo"
		},
		"contract-test": {
			"type": "npm",
			"name": "@taqueria/plugin-jest"
		}
	},
	"plugins": [
		{
			"name": "@taqueria/plugin-ligo",
			"version": "0.1",
			"schema": "1.0",
			"alias": "ligo",
			"tasks": [
				{
					"task": "ligo",
					"command": "ligo",
					"description": "This task allows you to run arbitrary LIGO native commands. Note that they might not benefit from the abstractions provided by Taqueria",
					"encoding": "none",
					"handler": "proxy",
					"options": [
						{
							"shortFlag": "c",
							"flag": "command",
							"description": "The command to be passed to the underlying LIGO binary, wrapped in quotes",
							"type": "string",
							"required": true
						}
					]
				},
				{
					"task": "compile",
					"command": "compile <sourceFile>",
					"aliases": [
						"c",
						"compile-ligo"
					],
					"description": "Compile a smart contract written in a LIGO syntax to Michelson code, along with its associated storage/parameter list files if they are found",
					"encoding": "json",
					"handler": "proxy",
					"options": [
						{
							"flag": "json",
							"description": "Emit JSON-encoded Michelson",
							"boolean": true
						}
					]
				},
				{
					"task": "compile-all",
					"command": "compile-all",
					"description": "Compile all main smart contracts written in a LIGO syntax to Michelson code, along with their associated storage/parameter list files if they are found",
					"encoding": "json",
					"handler": "proxy",
					"options": [
						{
							"flag": "json",
							"description": "Emit JSON-encoded Michelson",
							"boolean": true
						}
					]
				},
				{
					"task": "test",
					"command": "test <sourceFile>",
					"description": "Test a smart contract written in LIGO",
					"encoding": "json",
					"handler": "proxy"
				},
				{
					"task": "get-image",
					"command": "get-image",
					"description": "Gets the name of the image to be used",
					"hidden": true,
					"handler": "proxy"
				}
			],
			"operations": [],
			"templates": [
				{
					"template": "contract",
					"command": "contract <sourceFileName>",
					"description": "Create a LIGO contract with boilerplate code",
					"options": [
						{
							"shortFlag": "s",
							"flag": "syntax",
							"description": "The syntax used in the contract",
							"type": "string"
						}
					],
					"positionals": [
						{
							"placeholder": "sourceFileName",
							"description": "The name of the LIGO contract to generate",
							"type": "string"
						}
					],
					"handler": "function"
				}
			]
		},
		{
			"name": "@taqueria/plugin-flextesa",
			"version": "0.1",
			"schema": "1.0",
			"alias": "flextesa",
			"tasks": [
				{
					"task": "start sandbox",
					"command": "start sandbox [sandboxName]",
					"aliases": [
						"start flextesa"
					],
					"description": "Starts a flextesa sandbox",
					"encoding": "none",
					"handler": "proxy",
					"options": [],
					"positionals": [
						{
							"placeholder": "sandboxName",
							"description": "The name of the sandbox to start"
						}
					]
				},
				{
					"task": "stop sandbox",
					"command": "stop sandbox [sandboxName]",
					"aliases": [
						"stop flextesa"
					],
					"description": "Stops a flextesa sandbox",
					"handler": "proxy",
					"options": [],
					"positionals": [
						{
							"placeholder": "sandboxName",
							"description": "The name of the sandbox to stop"
						}
					]
				},
				{
					"task": "list accounts",
					"command": "list accounts <sandboxName>",
					"aliases": [],
					"description": "List the balances of all sandbox accounts",
					"encoding": "json",
					"handler": "proxy",
					"options": [],
					"positionals": [
						{
							"placeholder": "sandboxName",
							"description": "The name of the sandbox to use"
						}
					]
				},
				{
					"task": "bake",
					"command": "bake <sandboxName>",
					"aliases": [
						"b"
					],
					"description": "Manually bake a block. Use when the \"baking\" setting of a flextesa sandbox is set to \"disabled\".",
					"encoding": "none",
					"handler": "proxy",
					"options": [
						{
							"shortFlag": "w",
							"flag": "watch",
							"description": "Watch for operations as they are injected into the mempool and bake them as immediate as possible.",
							"boolean": true
						}
					],
					"positionals": [
						{
							"placeholder": "sandboxName",
							"description": "The name of the sandbox to stop"
						}
					]
				},
				{
					"task": "show protocols",
					"command": "show protocols",
					"aliases": [
						"list protocols"
					],
					"description": "List protocols understood by this version of Flextesa",
					"encoding": "json",
					"handler": "proxy",
					"options": []
				}
			],
			"operations": [],
			"templates": []
		},
		{
			"name": "@taqueria/plugin-taquito",
			"version": "0.1",
			"schema": "1.0",
			"alias": "taquito",
			"tasks": [
				{
					"task": "deploy",
					"command": "deploy <contract>",
					"aliases": [
						"originate"
					],
					"description": "Deploy a smart contract to a particular environment",
					"encoding": "application/json",
					"handler": "proxy",
					"options": [
						{
							"flag": "alias",
							"description": "Alias used to refer to the deployed contract's address",
							"required": false
						},
						{
							"flag": "storage",
							"description": "Name of the storage file that contains the storage value as a Michelson expression, in the artifacts directory, used for originating a contract",
							"required": false
						},
						{
							"flag": "sender",
							"description": "Name of an instantiated account to use as the sender of the originate operation",
							"required": false
						},
						{
							"flag": "mutez",
							"description": "Amount of Mutez to transfer",
							"required": false
						}
					]
				},
				{
					"task": "transfer",
					"command": "transfer <contract>",
					"aliases": [
						"call"
					],
					"description": "Transfer/call an implicit account or a smart contract (specified via its alias or address) deployed to a particular environment",
					"encoding": "application/json",
					"handler": "proxy",
					"options": [
						{
							"flag": "mutez",
							"description": "Amount of Mutez to transfer",
							"required": false
						},
						{
							"flag": "param",
							"description": "Name of the parameter file that contains the parameter value as a Michelson expression, in the artifacts directory, used for invoking a deployed contract",
							"required": false
						},
						{
							"flag": "entrypoint",
							"description": "You may explicitly specify an entrypoint to make the parameter value shorter, without having to specify a chain of (Left (Right ... 14 ...))",
							"required": false
						},
						{
							"flag": "sender",
							"description": "Name of an instantiated account to use as the sender of the transfer operation",
							"required": false
						}
					]
				},
				{
					"task": "fund",
					"command": "fund",
					"description": "Fund all the instantiated accounts up to the desired/declared amount in a target environment",
					"encoding": "application/json",
					"handler": "proxy"
				},
				{
					"task": "instantiate-account",
					"command": "instantiate-account",
					"description": "Instantiate all accounts declared in the \"accounts\" field at the root level of the config file to a target environment",
					"encoding": "application/json",
					"handler": "proxy"
				}
			],
			"operations": [],
			"templates": []
		},
		{
			"name": "@taqueria/plugin-jest",
			"version": "0.4.0",
			"schema": "0.1",
			"alias": "jest",
			"tasks": [
				{
					"task": "test",
					"command": "test [partition]",
					"aliases": [
						"jest"
					],
					"description": "Setup a directory as a partition to run Jest tests",
					"handler": "proxy",
					"options": [
						{
							"shortFlag": "i",
							"flag": "init",
							"description": "Initializes the partition for Jest",
							"boolean": true
						},
						{
							"shortFlag": "t",
							"flag": "testPattern",
							"description": "Run test files that match the provided pattern"
						}
					],
					"positionals": [
						{
							"placeholder": "partition",
							"description": "Name of the partition for these tests",
							"defaultValue": "tests",
							"type": "string"
						}
					]
				}
			],
			"operations": [],
			"templates": [
				{
					"template": "contract-test",
					"command": "contract-test <michelsonArtifact>",
					"description": "Generate integration test for a contract",
					"options": [
						{
							"flag": "partition",
							"description": "Partition to place generated test suite",
							"defaultValue": "tests",
							"type": "string"
						}
					],
					"positionals": [
						{
							"placeholder": "michelsonArtifact",
							"description": "Name of the michelson contract (artifact) to generate tests for",
							"type": "string",
							"required": true
						}
					],
					"handler": "function"
				}
			]
		}
	]
}
